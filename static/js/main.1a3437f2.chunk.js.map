{"version":3,"sources":["images/dice/value/0.png","images/dice/value/1.png","images/dice/value/2.png","images/dice/value/3.png","images/dice/value/4.png","images/dice/value/5.png","actions/diceAction.js","actions/index.js","reducers/todos.js","reducers/nextDice.js","reducers/visibilityFilter.js","reducers/index.js","utils/NumberUtil.js","components/Cell.js","components/Board.js","components/Dice.js","containers/RollDice.js","components/Piece.js","components/Game.js","index.js"],"names":["module","exports","__webpack_require__","p","DiceActions","ActionTypes","VisibilityFilters","todos","state","arguments","length","undefined","action","type","concat","Object","toConsumableArray","id","text","completed","map","todo","objectSpread","nextDice","nextValue","visibilityFilter","filter","combineReducers","between","value","fromInclusive","toInclusive","Cell","react_default","a","createElement","className","style","this","props","children","React","Component","Role","DropTarget","canDrop","drop","connect","monitor","connectDropTarget","dropTarget","isOver","Board","x","y","maxX","maxY","cornerX","cornerY","validX","validY","n","cells","cellsInRows","role","color","isHome","Math","abs","inBoard","getColor","cell","components_Cell","key","background","pieces","get","toString","push","initializeCells","values","v0","v1","v2","v3","v4","v5","Dice","_this","currValue","console","log","dist_default","title","alt","src","onClick","roll","dispatch","prev","next","prevValue","max","floor","random","nextRandomValue","Piece","ref","connectDragSource","DragSource","beginDrag","dragSource","isDragging","Map","components_Piece","Game","lib","backend","HTML5Backend","components_Board","RollDice","middleware","thunk","store","createStore","reducers","composeWithDevTools","applyMiddleware","apply","render","es","components_Game","document","getElementById"],"mappings":"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","file":"static/js/main.1a3437f2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/0.343601e3.png\";","module.exports = __webpack_public_path__ + \"static/media/1.7417eb73.png\";","module.exports = __webpack_public_path__ + \"static/media/2.4f588f78.png\";","module.exports = __webpack_public_path__ + \"static/media/3.2c16e9d3.png\";","module.exports = __webpack_public_path__ + \"static/media/4.b3fa6e87.png\";","module.exports = __webpack_public_path__ + \"static/media/5.fa024edf.png\";","export const DiceActions = {\r\n    ROLLING: 'Rolling',\r\n    SETTING: 'Setting'\r\n};\r\n\r\nexport const rolling = () => ({\r\n    type: DiceActions.ROLLING\r\n});\r\n\r\nexport const setValue = nextValue => ({\r\n    type: DiceActions.SETTING,\r\n    nextValue\r\n});","import {DiceActions} from \"./diceAction\";\r\n\r\nexport const ActionTypes = {\r\n    ADD_TODO: 'ADD_TODO',\r\n    SET_VISIBILITY_FILTER: 'SET_VISIBILITY_FILTER',\r\n    TOGGLE_TODO: 'TOGGLE_TODO'\r\n};\r\n\r\nlet nextTodoId = 0;\r\nexport const addTodo = text => ({\r\n    type: ActionTypes.ADD_TODO,\r\n    id: nextTodoId++,\r\n    text\r\n});\r\n\r\nexport const setVisibilityFilter = filter => ({\r\n    type: ActionTypes.SET_VISIBILITY_FILTER,\r\n    filter\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n    type: ActionTypes.TOGGLE_TODO,\r\n    id\r\n});\r\nexport const VisibilityFilters = {\r\n    SHOW_ALL: 'SHOW_ALL',\r\n    SHOW_COMPLETED: 'SHOW_COMPLETED',\r\n    SHOW_ACTIVE: 'SHOW_ACTIVE'\r\n};\r\n\r\nexport const roll = nextValue => ({\r\n    type: DiceActions.SETTING,\r\n    nextValue\r\n});","import {ActionTypes} from \"../actions\";\r\n\r\nconst todos = (state = [], action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.ADD_TODO:\r\n            return [\r\n                ...state,\r\n                {\r\n                    id: action.id,\r\n                    text: action.text,\r\n                    completed: false\r\n                }\r\n            ];\r\n        case ActionTypes.TOGGLE_TODO:\r\n            return state.map(todo =>\r\n                todo.id === action.id ?\r\n                    {\r\n                        ...todo,\r\n                        completed: !todo.completed\r\n                    }\r\n                    : todo\r\n            );\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default todos;","import {DiceActions} from \"../actions/diceAction\";\r\n\r\nconst nextDice = (state = 5, action) => {\r\n    switch (action.type) {\r\n        // not used\r\n        case DiceActions.ROLLING:\r\n            return state;\r\n        case DiceActions.SETTING:\r\n            return action.nextValue;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default nextDice;","import {ActionTypes, VisibilityFilters} from '../actions'\r\n\r\n// state is default filter\r\nconst visibilityFilter = (state = VisibilityFilters.SHOW_ALL, action) => {\r\n    switch (action.type) {\r\n        case ActionTypes.SET_VISIBILITY_FILTER:\r\n            return action.filter;\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default visibilityFilter;","import {combineReducers} from 'redux'\r\nimport todos from './todos'\r\nimport nextDice from \"./nextDice\";\r\nimport visibilityFilter from \"./visibilityFilter\";\r\n\r\n\r\nexport default combineReducers({\r\n    nextDice,\r\n    todos,\r\n    visibilityFilter\r\n})","/**\r\n * Check if the specified value is between the specified range.\r\n * <br>\r\n * NB, the `from` and `to` are inclusive.\r\n *\r\n * @param value the value to be checked.\r\n * @param fromInclusive the left boundary value, inclusive.\r\n * @param toInclusive the right boundary value, inclusive.\r\n * @returns {boolean}\r\n */\r\nexport const between = (value: number, fromInclusive: number, toInclusive: number): boolean => {\r\n    return value >= fromInclusive && value <= toInclusive;\r\n};\r\n\r\n/**\r\n * Generate random value different with the previous value\r\n * NOTE: it's not pure function\r\n * @param prevValue the previous value\r\n * @param max the max value to generate\r\n * @returns {number}\r\n * TODO: seek better solution for state update\r\n */\r\nexport const nextRandomValue = (prevValue: number, max = 6): number => {\r\n    let next;\r\n    do {\r\n        next = Math.floor(Math.random() * max) + 1;\r\n    } while (next === prevValue);\r\n    return next;\r\n};","import React from 'react';\r\nimport '../css/Cell.css'\r\nimport {DropTarget} from \"react-dnd\";\r\nimport {notifyPosition} from \"../actions/cellAction\";\r\n\r\nclass Cell extends React.Component {\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='Cell' style={this.props.style}>\r\n                {this.props.children}\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport const Role = {\r\n    OozmaKappa: 'ok',\r\n    RoarOmegaRoar: 'ror',\r\n    NEUTRAL: \"neutral\",\r\n    DISABLED: \"disabled\",\r\n};\r\n\r\n\r\nexport default DropTarget(\r\n    'Piece',\r\n    {\r\n        canDrop: props => true,\r\n        drop: props => {\r\n\r\n        },\r\n    },\r\n    (connect, monitor) => {\r\n        return {\r\n            connectDropTarget: connect.dropTarget(),\r\n            isOver: !!monitor.isOver(),\r\n            canDrop: !!monitor.canDrop(),\r\n        }\r\n    },\r\n)(Cell);","import React from \"react\";\r\nimport {between} from \"../utils/NumberUtil\";\r\nimport Cell, {Role} from \"./Cell\";\r\n\r\nclass Board extends React.Component {\r\n\r\n    /**\r\n     * Determines if the specified coordinate in the Board.\r\n     * @param x\r\n     * @param y\r\n     * @returns {boolean}\r\n     */\r\n    inBoard(x, y) {\r\n        const maxX = this.props.maxX;\r\n        const maxY = this.props.maxY;\r\n        const cornerX = this.props.cornerX;\r\n        const cornerY = this.props.cornerY;\r\n        let validX = between(x, -maxX, maxX);\r\n        let validY = between(y, -maxY, maxY);\r\n\r\n        if (!validX || !validY) {\r\n            return false;\r\n        }\r\n        validX = between(x, -cornerX, cornerX);\r\n        validY = between(y, -cornerY, cornerY);\r\n        return validX || validY;\r\n    }\r\n\r\n    static getColor(role: Role) {\r\n        switch (role) {\r\n            default:\r\n                return 'white';\r\n            case Role.OozmaKappa:\r\n                return 'blue';\r\n            case Role.RoarOmegaRoar:\r\n                return 'orange';\r\n            case Role.NEUTRAL:\r\n                return 'grey';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates new Cells for this Board\r\n     *\r\n     * @Ensures cells.length > 0\r\n     */\r\n    initializeCells() {\r\n        let x, y, n = 0, cells = [];\r\n        const maxX = this.props.maxX;\r\n        const maxY = this.props.maxY;\r\n        for (y = -1 * maxY; y <= maxY; y++) {\r\n            let cellsInRows = [];\r\n            for (x = -1 * maxX; x <= maxX; x++) {\r\n                let role, color = 'white';\r\n                const isHome = Math.abs(x) === maxX;\r\n                if (this.inBoard(x, y)) {\r\n                    role = x === 0\r\n                        ? Role.NEUTRAL\r\n                        : (x < 0 ? Role.OozmaKappa : Role.RoarOmegaRoar);\r\n                    color = n++ % 2 === 0\r\n                        ? 'black'\r\n                        : Board.getColor(role);\r\n                } else {\r\n                    role = Role.DISABLED;\r\n                }\r\n                const cell = <Cell\r\n                    key={[x, y]}\r\n                    // x={x}\r\n                    // y={y}\r\n                    isHome={isHome}\r\n                    role={role}\r\n                    style={{\r\n                        background: color\r\n                    }}\r\n                >\r\n                    {\r\n                        this.props.pieces.get([x, y].toString())\r\n                    }\r\n                </Cell>;\r\n                cellsInRows.push(cell);\r\n            }\r\n            cells.push(\r\n                <div className='board-row' key={y}>\r\n                    {cellsInRows}\r\n                </div>\r\n            );\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.initializeCells()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board;","import React from \"react\";\r\nimport Center from 'react-center';\r\nimport v0 from '../images/dice/value/0.png';\r\nimport v1 from '../images/dice/value/1.png';\r\nimport v2 from '../images/dice/value/2.png';\r\nimport v3 from '../images/dice/value/3.png';\r\nimport v4 from '../images/dice/value/4.png';\r\nimport v5 from '../images/dice/value/5.png';\r\nimport \"../css/Dice.css\";\r\n\r\nconst values = [v0, v1, v2, v3, v4, v5];\r\n\r\nclass Dice extends React.Component {\r\n\r\n    render() {\r\n        const currValue = this.props.value;\r\n        console.log('next dice value: ' + currValue);\r\n        return (\r\n            <Center>\r\n                <img id=\"Dice\"\r\n                     title=\"Hold on until you got a lucky number!\"\r\n                     alt={\"current dice value: \" + currValue}\r\n                     src={values[currValue - 1]}\r\n                     onClick={() => {\r\n                         this.props.roll(currValue);\r\n                     }}\r\n                />\r\n            </Center>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dice;","import {connect} from 'react-redux'\r\nimport {setValue} from \"../actions/diceAction\";\r\nimport Dice from \"../components/Dice\";\r\nimport {nextRandomValue} from \"../utils/NumberUtil\";\r\n\r\nconst mapStateToProps = state => ({\r\n    value: state.nextDice\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    roll: (prev) => {\r\n        const next = nextRandomValue(prev);\r\n        dispatch(setValue(next));\r\n    }\r\n});\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Dice)","import React from \"react\";\r\nimport '../css/Piece.css'\r\nimport {DragSource} from \"react-dnd\";\r\n\r\nclass Piece extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"Piece\"\r\n                 ref={this.props.connectDragSource}\r\n            >\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default DragSource(\r\n    'Piece',\r\n    {\r\n        beginDrag: () => ({}),\r\n    },\r\n    (connect, monitor) => ({\r\n        connectDragSource: connect.dragSource(),\r\n        // connectDragPreview: connect.dragPreview(),\r\n        isDragging: monitor.isDragging(),\r\n    }),\r\n)(Piece);","import React from 'react'\r\nimport Center from \"react-center\";\r\nimport Board from \"./Board\";\r\n// import Dice from \"./Dice\";\r\nimport '../index.css';\r\nimport RollDice from \"../containers/RollDice\";\r\nimport {DndProvider} from \"react-dnd\";\r\nimport HTML5Backend from 'react-dnd-html5-backend';\r\nimport Piece from \"./Piece\";\r\n\r\nconst pieces = new Map([\r\n    [[-6, 2].toString(), <Piece></Piece>],\r\n    [[-6, 3].toString(), <Piece></Piece>],\r\n    [[-6, 4].toString(), <Piece></Piece>],\r\n    [[6, 2].toString(), <Piece></Piece>],\r\n    [[6, 3].toString(), <Piece></Piece>],\r\n    [[6, 4].toString(), <Piece></Piece>],\r\n\r\n]);\r\n\r\nclass Game extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <Center>\r\n                <div className=\"game\">\r\n                    <div className=\"game-info\">\r\n                        <div>Player 1 Panel</div>\r\n                    </div>\r\n                    <div className=\"game-board\">\r\n                        <DndProvider backend={HTML5Backend}>\r\n                            <Board\r\n                                maxX={6}\r\n                                maxY={6}\r\n                                cornerX={4}\r\n                                cornerY={4}\r\n                                pieces={pieces}\r\n                            />\r\n                        </DndProvider>\r\n                        <RollDice/>\r\n                    </div>\r\n                    <div className=\"game-info\">\r\n                        <div>Player 2 Panel</div>\r\n                    </div>\r\n                </div>\r\n            </Center>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default Game;","import React from 'react';\nimport {render} from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {applyMiddleware, createStore} from 'redux';\nimport thunk from 'redux-thunk';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport reducers from './reducers';\nimport Game from './components/Game';\n\n\n// function Square(props) {\n//     return (\n//         <button\n//             className='square'\n//             onClick={props.onClick}>\n//             {props.value}\n//         </button>\n//     )\n//\n// }\n//\n//\n// class Board extends React.Component {\n//\n//     renderSquare(i) {\n//         return (<Cell\n//             value={this.props.squares[i]}\n//             onClick={() => {\n//                 this.props.onClick(i)\n//             }}\n//         />);\n//     }\n//\n//     render() {\n//\n//         return (\n//             <div>\n//                 <div className=\"board-row\">\n//                     {this.renderSquare(0)}\n//                     {this.renderSquare(1)}\n//                     {this.renderSquare(2)}\n//                 </div>\n//                 <div className=\"board-row\">\n//                     {this.renderSquare(3)}\n//                     {this.renderSquare(4)}\n//                     {this.renderSquare(5)}\n//                 </div>\n//                 <div className=\"board-row\">\n//                     {this.renderSquare(6)}\n//                     {this.renderSquare(7)}\n//                     {this.renderSquare(8)}\n//                 </div>\n//             </div>\n//         );\n//     }\n// }\n//\n// class Game extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             history: [\n//                 {squares: Array(9).fill(null),}\n//             ],\n//             stepNumber: 0,\n//             xIsNext: true,\n//         };\n//     }\n//\n//     handleClick(i) {\n//         const history = this.state.history.slice(0, this.state.stepNumber + 1);\n//         const current = history[history.length - 1];\n//         const squares = current.squares.slice();\n//         if (calculateWinner(squares) || squares[i]) {\n//             return;\n//         }\n//         squares[i] = this.state.xIsNext ? 'X' : 'O';\n//         this.setState({\n//             history: history.concat([{\n//                 squares: squares,\n//             }]),\n//             stepNumber: history.length,\n//             xIsNext: !this.state.xIsNext,\n//         });\n//     }\n//\n//     jumpTo(step) {\n//         this.setState({\n//             stepNumber: step,\n//             xIsNext: (step % 2) === 0,\n//         });\n//     }\n//\n//     render() {\n//         const history = this.state.history;\n//         const current = history[this.state.stepNumber];\n//         const winner = calculateWinner(current.squares);\n//\n//         const moves = history.map((step, move) => {\n//             const desc = move ?\n//                 'Go to move #' + move :\n//                 'Go to game start';\n//             return (\n//                 <li>\n//                     <button onClick={() => this.jumpTo(move)}>{desc}</button>\n//                 </li>\n//             );\n//         });\n//\n//         let status;\n//         if (winner) {\n//             status = 'Winner: ' + winner;\n//         } else {\n//             status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n//         }\n//         return (\n//             <Center>\n//                 <div className=\"game\">\n//                     <div className=\"game-board\">\n//                         <Board\n//                             maxX={6}\n//                             maxY={6}\n//                             cornerX={4}\n//                             cornerY={4}\n//                         />\n//                         <Dice/>\n//                     </div>\n//                     <div className=\"game-info\">\n//                         <div>{status}</div>\n//                         <ol>{moves}</ol>\n//                     </div>\n//                 </div>\n//             </Center>\n//         );\n//     }\n// }\n//\n// function calculateWinner(squares) {\n//     const lines = [\n//         [0, 1, 2],\n//         [3, 4, 5],\n//         [6, 7, 8],\n//         [0, 3, 6],\n//         [1, 4, 7],\n//         [2, 5, 8],\n//         [0, 4, 8],\n//         [2, 4, 6],\n//     ];\n//     for (let i = 0; i < lines.length; i++) {\n//         const [a, b, c] = lines[i];\n//         if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n//             return squares[a];\n//         }\n//     }\n//     return null;\n// }\n\n// ========================================\n//\n// ReactDOM.render(\n//     <Game/>,\n//     document.getElementById('root')\n// );\n\n\n//\n// const loggerMiddleware = createLogger({collapsed: true});\n//\nconst middleware = [thunk];\n\nconst store = createStore(\n    reducers,\n    composeWithDevTools(\n        applyMiddleware(...middleware)\n    )\n);\n\nrender(\n    <Provider store={store}>\n        {/*<App/>*/}\n        <Game/>\n    </Provider>,\n    document.getElementById('root')\n);"],"sourceRoot":""}